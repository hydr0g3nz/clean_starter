// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTransactionID holds the string denoting the transaction_id field in the database.
	FieldTransactionID = "transaction_id"
	// FieldSourceTransactionID holds the string denoting the source_transaction_id field in the database.
	FieldSourceTransactionID = "source_transaction_id"
	// FieldTerminalID holds the string denoting the terminal_id field in the database.
	FieldTerminalID = "terminal_id"
	// Table holds the table name of the user in the database.
	Table = "users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldTransactionID,
	FieldSourceTransactionID,
	FieldTerminalID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TransactionIDValidator is a validator for the "transaction_id" field. It is called by the builders before save.
	TransactionIDValidator func(string) error
	// SourceTransactionIDValidator is a validator for the "source_transaction_id" field. It is called by the builders before save.
	SourceTransactionIDValidator func(string) error
	// TerminalIDValidator is a validator for the "terminal_id" field. It is called by the builders before save.
	TerminalIDValidator func(string) error
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTransactionID orders the results by the transaction_id field.
func ByTransactionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransactionID, opts...).ToFunc()
}

// BySourceTransactionID orders the results by the source_transaction_id field.
func BySourceTransactionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceTransactionID, opts...).ToFunc()
}

// ByTerminalID orders the results by the terminal_id field.
func ByTerminalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTerminalID, opts...).ToFunc()
}
