// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"github.com/hydr0g3nz/wallet_topup_system/internal/adapter/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// TransactionID applies equality check predicate on the "transaction_id" field. It's identical to TransactionIDEQ.
func TransactionID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTransactionID, v))
}

// SourceTransactionID applies equality check predicate on the "source_transaction_id" field. It's identical to SourceTransactionIDEQ.
func SourceTransactionID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSourceTransactionID, v))
}

// TerminalID applies equality check predicate on the "terminal_id" field. It's identical to TerminalIDEQ.
func TerminalID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTerminalID, v))
}

// TransactionIDEQ applies the EQ predicate on the "transaction_id" field.
func TransactionIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTransactionID, v))
}

// TransactionIDNEQ applies the NEQ predicate on the "transaction_id" field.
func TransactionIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTransactionID, v))
}

// TransactionIDIn applies the In predicate on the "transaction_id" field.
func TransactionIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldTransactionID, vs...))
}

// TransactionIDNotIn applies the NotIn predicate on the "transaction_id" field.
func TransactionIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTransactionID, vs...))
}

// TransactionIDGT applies the GT predicate on the "transaction_id" field.
func TransactionIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldTransactionID, v))
}

// TransactionIDGTE applies the GTE predicate on the "transaction_id" field.
func TransactionIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTransactionID, v))
}

// TransactionIDLT applies the LT predicate on the "transaction_id" field.
func TransactionIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldTransactionID, v))
}

// TransactionIDLTE applies the LTE predicate on the "transaction_id" field.
func TransactionIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTransactionID, v))
}

// TransactionIDContains applies the Contains predicate on the "transaction_id" field.
func TransactionIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldTransactionID, v))
}

// TransactionIDHasPrefix applies the HasPrefix predicate on the "transaction_id" field.
func TransactionIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldTransactionID, v))
}

// TransactionIDHasSuffix applies the HasSuffix predicate on the "transaction_id" field.
func TransactionIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldTransactionID, v))
}

// TransactionIDEqualFold applies the EqualFold predicate on the "transaction_id" field.
func TransactionIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldTransactionID, v))
}

// TransactionIDContainsFold applies the ContainsFold predicate on the "transaction_id" field.
func TransactionIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldTransactionID, v))
}

// SourceTransactionIDEQ applies the EQ predicate on the "source_transaction_id" field.
func SourceTransactionIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSourceTransactionID, v))
}

// SourceTransactionIDNEQ applies the NEQ predicate on the "source_transaction_id" field.
func SourceTransactionIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSourceTransactionID, v))
}

// SourceTransactionIDIn applies the In predicate on the "source_transaction_id" field.
func SourceTransactionIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldSourceTransactionID, vs...))
}

// SourceTransactionIDNotIn applies the NotIn predicate on the "source_transaction_id" field.
func SourceTransactionIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSourceTransactionID, vs...))
}

// SourceTransactionIDGT applies the GT predicate on the "source_transaction_id" field.
func SourceTransactionIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldSourceTransactionID, v))
}

// SourceTransactionIDGTE applies the GTE predicate on the "source_transaction_id" field.
func SourceTransactionIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSourceTransactionID, v))
}

// SourceTransactionIDLT applies the LT predicate on the "source_transaction_id" field.
func SourceTransactionIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldSourceTransactionID, v))
}

// SourceTransactionIDLTE applies the LTE predicate on the "source_transaction_id" field.
func SourceTransactionIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSourceTransactionID, v))
}

// SourceTransactionIDContains applies the Contains predicate on the "source_transaction_id" field.
func SourceTransactionIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldSourceTransactionID, v))
}

// SourceTransactionIDHasPrefix applies the HasPrefix predicate on the "source_transaction_id" field.
func SourceTransactionIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldSourceTransactionID, v))
}

// SourceTransactionIDHasSuffix applies the HasSuffix predicate on the "source_transaction_id" field.
func SourceTransactionIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldSourceTransactionID, v))
}

// SourceTransactionIDEqualFold applies the EqualFold predicate on the "source_transaction_id" field.
func SourceTransactionIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldSourceTransactionID, v))
}

// SourceTransactionIDContainsFold applies the ContainsFold predicate on the "source_transaction_id" field.
func SourceTransactionIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldSourceTransactionID, v))
}

// TerminalIDEQ applies the EQ predicate on the "terminal_id" field.
func TerminalIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTerminalID, v))
}

// TerminalIDNEQ applies the NEQ predicate on the "terminal_id" field.
func TerminalIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTerminalID, v))
}

// TerminalIDIn applies the In predicate on the "terminal_id" field.
func TerminalIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldTerminalID, vs...))
}

// TerminalIDNotIn applies the NotIn predicate on the "terminal_id" field.
func TerminalIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTerminalID, vs...))
}

// TerminalIDGT applies the GT predicate on the "terminal_id" field.
func TerminalIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldTerminalID, v))
}

// TerminalIDGTE applies the GTE predicate on the "terminal_id" field.
func TerminalIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTerminalID, v))
}

// TerminalIDLT applies the LT predicate on the "terminal_id" field.
func TerminalIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldTerminalID, v))
}

// TerminalIDLTE applies the LTE predicate on the "terminal_id" field.
func TerminalIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTerminalID, v))
}

// TerminalIDContains applies the Contains predicate on the "terminal_id" field.
func TerminalIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldTerminalID, v))
}

// TerminalIDHasPrefix applies the HasPrefix predicate on the "terminal_id" field.
func TerminalIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldTerminalID, v))
}

// TerminalIDHasSuffix applies the HasSuffix predicate on the "terminal_id" field.
func TerminalIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldTerminalID, v))
}

// TerminalIDEqualFold applies the EqualFold predicate on the "terminal_id" field.
func TerminalIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldTerminalID, v))
}

// TerminalIDContainsFold applies the ContainsFold predicate on the "terminal_id" field.
func TerminalIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldTerminalID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
